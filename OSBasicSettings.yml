# OSBasicSettings.yml
---
- hosts: win
  collections:
    - ansible.windows
  gather_facts: no
  vars_files:
    - params.yml
  tasks:
    - name: Set Computer Name
      win_shell: |
        $ComputerInfo = Get-WmiObject Win32_ComputerSystem
        $ComputerInfo.Rename("{{ computer_name }}")

    - name: Check Domain Membership
      win_shell: |
        $ComputerInfo = Get-WmiObject Win32_ComputerSystem
        $ComputerInfo.PartOfDomain
      register: domain_status

    - name: Join Domain
      win_domain_membership:
        hostname: "{{ computer_name }}"
        domain_name: "{{ domain_name }}"
        username: "{{ domain_admin_username }}"
        password: "{{ domain_admin_password }}"
        state: domain
      when: "not domain_status.stdout"
      register: reboot_result

    - name: Check Workgroup Membership
      win_shell: |
        (Get-WmiObject Win32_ComputerSystem).Workgroup
      register: workgroup_status

    - name: Join Workgroup
      win_domain_membership:
        hostname: "{{ computer_name }}"
        workgroup: "{{ workgroup_name }}"
        state: workgroup
      when: "not domain_status.stdout and not workgroup_status.stdout"
      register: reboot_result
      
    - name: Set Primary DNS Suffix
      win_shell: |
        Set-DnsClientGlobalSetting -SuffixSearchList "{{ primary_dns_suffix }}"
      register: dns_suffix_result

    - name: Get current primary DNS suffix setting
      win_reg_stat:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters"
        name: "SyncDomainWithMembership"
      register: dns_suffix_setting

    - name: Enable/disable primary DNS suffix change
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters"
        name: "SyncDomainWithMembership"
        data: "{{ enable_primary_dns_suffix }}"
        type: dword
      when: dns_suffix_setting.exists | default(false) and dns_suffix_setting.value != enable_primary_dns_suffix
      
   - name: Copy Group Policy YAML file
      copy:
        src: windows_update_settings.yml
        dest: C:\temp\group_policy.yml

    - name: Convert YAML to XML
      ansible.builtin.command: |
        python -c 'import yaml, sys, xml.etree.ElementTree as ET; \
        tree = yaml.safe_load(sys.stdin.read()); \
        root = ET.Element("ComputerConfiguration"); \
        policies = ET.SubElement(root, "Policies"); \
        win_update = ET.SubElement(policies, "WindowsUpdate"); \
        for key, value in tree["ComputerConfiguration"]["Policies"]["WindowsUpdate"].items(): \
            node = ET.SubElement(win_update, key); \
            node.text = str(value); \
        xml_data = ET.tostring(root).decode(); \
        with open("C:\\temp\\group_policy.xml", "w") as f: \
            f.write(xml_data)'
      args:
        stdin: "{{ lookup('file', 'C:\\temp\\group_policy.yml') }}"

    - name: Import Group Policy settings
      win_shell: |
        Import-Module GroupPolicy
        Import-GPO -Path C:\temp\group_policy.xml -BackupGpoName "BackupBeforeWindowsUpdate"
        Invoke-GPUpdate

    - name: Remove temporary Group Policy file
      win_file:
        path: C:\temp\group_policy.xml
        state: absent 

    - name: Configure Windows Update Settings (Advanced Options)
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update"
        name: "AUOptions"
        data: "3"
        type: dword

    - name: Configure Windows Update for Other Microsoft Products
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate"
        name: "IncludeRecommendedUpdates"
        data: "1"
        type: dword

    - name: Configure Download Updates Over Metered Connections
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\DeliveryOptimization\\Config"
        name: "DODownloadMode"
        data: "0"
        type: dword

    - name: Configure Update Notifications
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\UX\\Settings"
        name: "UxOption"
        data: "2"
        type: dword

    - name: Configure Pause Updates
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\WindowsUpdate\\UX\\Settings"
        name: "PauOptions"
        data: "2"
        type: dword

    - name: Configure Real-time Protection
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Windows Defender\\Real-Time Protection"
        name: "DisableRealtimeMonitoring"
        data: "0"
        type: dword
      when: "not domain_status.stdout and not workgroup_status.stdout"

    - name: Configure Cloud-based Protection
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\SpyNet"
        name: "SpynetReporting"
        data: "1"
        type: dword

    - name: Configure Automatic Sample Submission
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Windows Defender\\Spynet"
        name: "SubmitSamplesConsent"
        data: "1"
        type: dword
      when: "not domain_status.stdout and not workgroup_status.stdout"

    - name: Configure Controlled Folder Access
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Windows Defender\\Exploit Guard\\Controlled Folder Access"
        name: "EnableControlledFolderAccess"
        data: "1"
        type: dword
      when: "not domain_status.stdout and not workgroup_status.stdout"

    - name: Configure Memory Integrity
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer"
        name: "DeviceGuard\\EnableVirtualizationBasedSecurity"
        data: "1"
        type: dword

    - name: Configure Optional Diagnostic Data
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Diagnostic\\"
        name: "AllowTelemetry"
        data: "1"
        type: dword

    - name: Configure Improve Inking and Typing
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PenWorkspace"
        name: "PenWorkspace\\PenFeedbackEnabled"
        data: "1"
        type: dword

    - name: Configure View Diagnostic Data
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Privacy"
        name: "DeviceName\\PublishUserActivities"
        data: "1"
        type: dword

    - name: Configure Feedback Frequency
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Feedback"
        name: "Feedback\\FeedbackFrequency"
        data: "1"
        type: dword

    - name: Configure Diagnostic & Feedback Settings
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection"
        name: "AllowTelemetry"
        data: "0"
        type: dword

    - name: Configure Internet Explorer Enhanced Security Configuration (IE ESC)
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
        name: "IsInstalled"
        data: "0"
        type: dword

    - name: Configure Internet Explorer Enhanced Security Configuration for Administrators
      win_regedit:
       key: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap"
       name: "IEHardenAdmin"
       data: "1"
       type: dword

    - name: Configure Internet Explorer Enhanced Security Configuration for Users
      win_regedit:
       key: "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap"
       name: "IEHarden"
       data: "1"
       type: dword

    - name: Check Activation Status
      win_shell: |
        (Get-CimInstance -ClassName SoftwareLicensingProduct -Filter "Name like 'Windows%'").LicenseStatus
      register: activation_status

    - name: Configure Server Manager Properties
      win_regedit:
        key: "HKLM:\\SOFTWARE\\Microsoft\\ServerManager"
        name: "DoNotOpenServerManagerAtLogon"
        data: "1"
        type: dword

    - name: Choose or Customize a Power Plan
      win_shell: |
        powercfg -setactive SCHEME_BALANCED

    - name: Set Time to Turn Off Display (in minutes)
      win_shell: |
        powercfg -change -monitor-timeout-ac 15
        powercfg -change -monitor-timeout-dc 10

    - name: Set Time to Put Computer to Sleep (in minutes)
      win_shell: |
        powercfg -change -standby-timeout-ac 30
        powercfg -change -standby-timeout-dc 20

    - name: Create Windows Group Account
      ansible.windows.win_group:
        name: "{{ new_group_name }}"
        description: "{{ group_description }}"
        state: present

    - name: Create Windows User Account
      ansible.windows.win_user:
        name: "{{ user_name }}"
        fullname: "{{ full_name }}"
        description: "{{ user_description }}"
        password: "{{ user_password }}"
        state: present
        password_expired: no
        password_never_expires: yes
        groups: "{{ new_group_name }}"


    - name: Reboot the machine
      win_reboot:
      async: 0
      poll: 0
      register: reboot_result
