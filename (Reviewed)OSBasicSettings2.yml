# OSBasicSettings2.yml
---
---
- hosts: win
  gather_facts: no
  vars_files:
    - params.yml

  tasks:
#Disk/Local Drive Information
- name: Setup new Data Disk
      community.windows.win_initialize_disk:
        disk_number: "{{ disk_number }}"
		
    - name: Create a partition
      community.windows.win_partition:
        drive_letter: "{{ drive_letter }}"
        partition_size: "{{ partition_size }}"
        disk_number: "{{ disk_number }}"
		
    - name: Format Partition
      community.windows.win_format:
        drive_letter: "{{ drive_letter }}"
        file_system: "{{ filesystem_type }}"
        new_label: "{{ partition_label }}"
        full: True
	  
- name: Set pagefile.sys to C drive temporarily
      win_pagefile:
        drive: "C:"  # Move paging file to C:\ drive
		
	  
- name: Change the drive letters XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

- name: Move pagefile.sys back to T drive
      win_pagefile:
        drive: "{{ temporary_drive_letter }}"
      when: temporary_drive_letter is defined

#Remote Desktop Settings
- name: Set Don't allow remote connections to this computer
Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 1 -Force

- name: Set Allow remote connections to this computer
Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force

	- name: Set Allow connections only from computers running Remote Desktop with Network Level Authentication (recommended)
	Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1 -Force

#Windows Firewall Configuration
- name: Disable Windows Firewall on all Profiles
      win_shell: |
        # Turn on Windows Defender Firewall for Domain, Public, and Private profiles
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True

- name: Set Domain Firewall XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

- name: Set Private Firewall XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

- name: Set Public Firewall XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

#Performance Settings
- name: Set Processor scheduling
      win_regedit:
        path: "{{ registry_processor }}"
        name: "{{ registry_name_processor }}"
        data: "{{ services_value }}"
        type: "{{ registry_type_proc }}"
        state: present

- name: Virtual Memory (set automatically manage paging file size for all drives)
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management
        name: PagingFiles
      register: pagingfiles_reg

- name: Set paging file size for  each drives
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management
        name: PagingFiles
        data: "{{ 'Auto' if enable_auto_manage else drive_letter_page + ' ' + initial_size_mb + ' ' + maximum_size_mb }}"
        type: string
      when: enable_auto_manage != ('Auto' in pagingfiles_reg.data|default([]))

#Startup and recovery settings (System startup) XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

- name: Set Default operating system XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

- name: Set Time to display list of operating systems XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

	- name: Set enabled or disabled XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	- name: Set Time (second) XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
- name: Set Time to display recovery options when needed XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

	- name: Set enabled or disabled XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	- name: Set Time (second) XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

#Startup and recovery settings (System failure) XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
- name: Set write an event to the system log
win_command: bcdedit /set {default} recoveryenabled yes

- name: Set automatically restart
win_command: bcdedit /set {default} bootstatuspolicy ignoreallfailures

- name: Set write debugging information XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

- name: Set dump file
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\CrashControl
        name: "{{ item.name }}"
        data: "{{ item.data }}"
        type: "{{ item.type }}"
        state: present
      with_items: "{{ dump_file_settings }}"
      register: reg_result

- name: Set overwrite any existing file XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

- name: Set disable automatic deletion of memory dumps when disk space is low XXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


#NTP Settings
- name: Set Global Configuration Settings
  win_reg_stat:
    path: "{{ global_config_registry_path }}"
  register: reg_status
  
	#Clock Discipline Parameters
	- name: Set MaxAllowedPhaseOffset XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	- name: Set MaxNegPhaseCorrection XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	- name: Set MaxPosPhaseCorrection XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	#General Parameters
	- name: AnnounceFlags XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	- name: LocalClockDispersion XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	- name: MaxPollInterval XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	- name: MinPollInterval XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
- name: Set Configure Windows NTP Client
      win_regedit:
        path: "{{ item.path }}"
        name: "{{ item.name }}"
        data: "{{ item.value }}"
        type: "{{ item.data_type | default('dword') }}"  # Use 'data_type' if available, default to 'dword' if not specified
        state: present
      loop: "{{ ntp_parameters }}"
      when: item.name != 'RestartService'  # Skip RestartService parameter
	#Options
	- name: Set NtpServer
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer
        name: Enabled
        data: 1
        type: dword
        state: present
      become: yes
      become_user: "{{ ntp_user }}"
      when: ntp_server_enabled | default(false)	
	  
	- name: Set Type XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	- name: Set SpecialPollInterval XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

- name: Set Enable Windows NTP Client XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

- name: Set Enable Windows NTP Server XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

#Service Settings
- name: Set Service name XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

- name: Set startup type
      win_service:
        name: "{{ windows_time_service.service_name }}"
        start_mode: "{{ windows_time_service.startup_type }}"
      register: service_result

#Registry Settings
- name: Set Disable IPv6
      win_reg_stat:
        path: "{{ ipv6_registry_path }}"
        name: "{{ ipv6_registry_name }}"
      register: ipv6_disabled
	  
    - name: Add registry settings
      win_regedit:
        path: "{{ item.registry_path }}"
        name: "{{ item.registry_name }}"
        data: "{{ item.value_data }}"
        type: "{{ item.value_type }}"
        state: "{{ item.state }}"
      loop: "{{ registry_settings }}"
      register: reg_results
	  
#Other Registry Settings
	#Registry 1
      win_regedit:
        path: "{{ item.registry_path }}"
        name: "{{ item.registry_name }}"
        data: "{{ item.value_data }}"
        type: "{{ item.value_type }}"
        state: "{{ item.state }}"
      loop: "{{ registry_settings }}"
      register: reg_results
	
	#Registry 2
      win_regedit:
        path: "{{ item.registry_path }}"
        name: "{{ item.registry_name }}"
        data: "{{ item.value_data }}"
        type: "{{ item.value_type }}"
        state: "{{ item.state }}"
      loop: "{{ registry_settings }}"
      register: reg_results
	
	#Registry 3
      win_regedit:
        path: "{{ item.registry_path }}"
        name: "{{ item.registry_name }}"
        data: "{{ item.value_data }}"
        type: "{{ item.value_type }}"
        state: "{{ item.state }}"
      loop: "{{ registry_settings }}"
      register: reg_results
	
#Folder Settings
- name: Set folder settings
      ansible.windows.win_file:
        path: "{{ folder_name }}"
        state: directory
      register: creation_results

#Explorer Settings
- name: Set file name extension
      win_regedit:
        path: HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
        name: HideFileExt
        data: "{{ file_name_extensions }}"
        type: dword
      register: hide_file_ext_result
	  
- name: Set hidden item
      win_regedit:
        path: HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
        name: Hidden
        data: "{{ show_hidden_items }}"
        type: dword
      register: show_hidden_items_result

#Event Log Settings
	#Windows Logs (Application)
	- name: Set Log Path
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application"
        name: "File"
        data: "{{ custom_log_file_path }}"
        type: string
        state: present
		
	- name: Set Enable logging XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	- name: Set Maximum log size (KB)
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application"
        name: "MaxSize"
        data: "{{ maximum_log_size_bytes }}"
        type: dword
        state: present
		
	- name: Set When masximum event log size is reached
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application"
        name: "Retention"
        data: "{{ retention_policy }}"
        type: dword
        state: present
	
	#Windows Logs (Security)
	- name: Set Log Path
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security"
        name: "File"
        data: "{{ custom_security_log_file_path }}"
        type: string
        state: present
	
	- name: Set Enable logging XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	- name: Set Maximum log size (KB)
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security"
        name: "MaxSize"
        data: "{{ maximum_security_log_size_bytes }}"
        type: dword
        state: present
	
	- name: Set When maximum event log size is reached XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

	#Windows Logs (Setup)
	- name: Set Log Path
	- name: Set Enable logging
	- name: Set Maximum log size (KB)
	- name: Set When masximum event log size is reached
	
	#Windows Logs (System)
	- name: Set Log Path
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\System"
        name: "File"
        data: "{{ custom_system_log_file_path }}"
        type: string
        state: present
		
	- name: Set Enable logging XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	- name: Set Maximum log size (KB)
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\System"
        name: "MaxSize"
        data: "{{ maximum_system_log_size_bytes }}"
        type: dword
        state: present
		
	- name: Set When masximum event log size is reached
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\System"
        name: "Retention"
        data: "{{ system_retention_policy }}"
        type: dword
        state: present
	
	#Windows Logs (Forwared Events)
	- name: Set Log Path
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\ForwardedEvents"
        name: "File"
        data: "{{ custom_forwarded_events_log_file_path }}"
        type: string
        state: present
		
	- name: Set Enable logging XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX MISSING SCRIPT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
	
	- name: Set Maximum log size (KB)
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\ForwardedEvents"
        name: "MaxSize"
        data: "{{ maximum_forwarded_events_log_size_bytes }}"
        type: dword
        state: present
		
	- name: Set When masximum event log size is reached
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\ForwardedEvents"
        name: "AutoBackupLogFiles"
        data: "{{ forwarded_events_auto_backup_log_files }}"
        type: dword
        state: present
		
    - name: Reboot the system to apply changes
      win_reboot:
      async: 0
      poll: 0
      register: reboot_result
