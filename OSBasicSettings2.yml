# OSBasicSettings2.yml
---
- hosts: win
  collections:
    - ansible.windows
  gather_facts: no
  vars_files:
    - params2.yml
  tasks:
    - name: Initialize a disk
      community.windows.win_initialize_disk:
        disk_number: "{{ disk_number }}"

    - name: Create a partition
      community.windows.win_partition:
        drive_letter: "{{ drive_letter }}"
        partition_size: "{{ partition_size }}"
        disk_number: "{{ disk_number }}"

    - name: Format Partition
      community.windows.win_format:
        drive_letter: "{{ drive_letter }}"
        file_system: "{{ filesystem_type }}"
        new_label: "{{ partition_label }}"
        full: True

    - name: Move paging file to C:\ drive
      win_pagefile:
        drive: "C:"  # Move paging file to C:\ drive

    - name: Move paging file to temporary storage drive
      win_pagefile:
        drive: "{{ temporary_drive_letter }}"
      when: temporary_drive_letter is defined

    - name: Get current operating system identifier
      win_shell: bcdedit /enum | findstr /C:"{current}"
      register: current_os_identifier

    - name: Enable or Disable Time to Display List of Operating Systems
      win_shell: bcdedit /timeout {{ boot_timeout }}
      register: result_timeout
      ignore_errors: yes
      changed_when: result_timeout.rc == 0
      vars:
        boot_timeout: "{{ boot_timeout_value if enable_boot_timeout else '0' }}"
      when: enable_boot_timeout_changed or not enable_boot_timeout

    - name: Enable or Disable Time to Display Recovery Options
      win_shell: bcdedit /bootems {{ boot_recovery_enabled }}
      register: result_recovery
      ignore_errors: yes
      changed_when: result_recovery.rc == 0
      vars:
        boot_recovery_enabled: "{{ 'true' if enable_recovery_options else 'false' }}"
      when: enable_recovery_options_changed or not enable_recovery_options

    - name: Install SNMP Service
      win_feature:
        name: SNMP-Service
        state: present

    - name: Configure Remote Desktop settings
      win_shell: |
        # Disable Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 1 -Force

        # Allow Remote Desktop
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force

        # Allow connections only from computers running Remote Desktop with Network Level Authentication (NLA)
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1 -Force


    - name: Configure Windows Defender Firewall
      win_shell: |
        # Turn on Windows Defender Firewall for Domain, Public, and Private profiles
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True

    - name: Enable or Disable firewall for Domain
      community.windows.win_firewall:
        state: "{{ firewall_domain_state }}"
        profiles:
        - Domain
      tags: domain_firewall

    - name: Enable or Disable firewall for Private
      community.windows.win_firewall:
        state: "{{ firewall_private_state }}"
        profiles:
        - Private
      tags: private_firewall

    - name: Enable or Disable firewall for Public
      community.windows.win_firewall:
        state: "{{ firewall_public_state }}"
        profiles:
        - Public
      tags: private_firewall

    - name: Set Processor Scheduling
      win_regedit:
        path: "{{ registry_processor }}"
        name: "{{ registry_name_processor }}"
        data: "{{ services_value }}"
        type: "{{ registry_type_proc }}"
        state: present

    - name: Enable or Disable Pagefile
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management
        name: PagingFiles
        data: "{{ 'Auto' if enable_auto_manage else drive_letter_page + ' ' + initial_size_mb + ' ' + maximum_size_mb }}"
        type: string
      when: enable_auto_manage != ('Auto' in pagingfiles_reg.data|default([]))

    - name: Get current state of PagingFiles registry value
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management
        name: PagingFiles
      register: pagingfiles_reg

    - name: Set system failure settings
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\CrashControl
        name: "{{ item.name }}"
        data: "{{ item.data }}"
        type: dword
      loop: "{{ system_failure_settings }}"

    - name: Set Timeout for Boot Menu
      win_command: bcdedit /timeout 10

    - name: Configure Automatic Restart upon System Failure
      win_command: bcdedit /set {default} bootstatuspolicy ignoreallfailures

    - name: Enable Writing of Event Logs upon System Failure
      win_command: bcdedit /set {default} recoveryenabled yes

    - name: Set Windows dump file settings
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Control\CrashControl
        name: "{{ item.name }}"
        data: "{{ item.data }}"
        type: "{{ item.type }}"
        state: present
      with_items: "{{ dump_file_settings }}"
      register: reg_result

    - name: Verify Changes
      win_command: bcdedit

    - name: Set Windows Time Service parameters
      win_regedit:
        path: "{{ item.path }}"
        name: "{{ item.name }}"
        data: "{{ item.value }}"
        type: "{{ item.data_type | default('dword') }}"  # Use 'data_type' if available, default to 'dword' if not specified
        state: present
      loop: "{{ ntp_parameters }}"
      when: item.name != 'RestartService'  # Skip RestartService parameter

    - name: Set NTP client configuration
      win_shell: w32tm /config /syncfromflags:manual /manualpeerlist:"pool.ntp.org" /reliable:yes /update
      become: yes
      become_user: "{{ admin_user }}"
      when: ntp_client_enabled | default(false)

    - name: Reset NTP client configuration
      win_shell: w32tm /config /syncfromflags:domhier /reliable:no /update
      become: yes
      become_user: "{{ admin_user }}"
      when: not ntp_client_enabled | default(false)

    - name: Enable NTP server
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer
        name: Enabled
        data: 1
        type: dword
        state: present
      become: yes
      become_user: "{{ admin_user }}"
      when: ntp_server_enabled | default(false)

    - name: Disable NTP server
      win_regedit:
        path: HKLM:\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer
        name: Enabled
        data: 0
        type: dword
        state: present
      become: yes
      become_user: "{{ admin_user }}"
      when: not ntp_server_enabled | default(false)

    - name: Restart Windows Time service
      win_service:
        name: w32time
        state: restarted
      become: yes
      become_user: "{{ admin_user }}"
      when: ntp_client_enabled | default(false) or ntp_server_enabled | default(false)

    - name: Set Windows Time service startup type to {{ windows_time_service.startup_type }}
      win_service:
        name: "{{ windows_time_service.service_name }}"
        start_mode: "{{ windows_time_service.startup_type }}"
      register: service_result

    - name: Start Windows Time service
      win_service:
        name: "{{ windows_time_service.service_name }}"
        state: started
      when: service_result.changed

    - name: Check if IPv6 is enabled or disabled
      win_reg_stat:
        path: "{{ ipv6_registry_path }}"
        name: "{{ ipv6_registry_name }}"
      register: ipv6_disabled

    - name: Enable or Disable IPv6 based on condition
      win_regedit:
        path: "{{ ipv6_registry_path }}"
        name: "{{ ipv6_registry_name }}"
        data: "{{ '0xffffffff' if ipv6_disabled.exists else '0' }}"
        type: "{{ ipv6_registry_type }}"
        state: present

    - name: Add registry settings
      win_regedit:
        path: "{{ item.registry_path }}"
        name: "{{ item.registry_name }}"
        data: "{{ item.value_data }}"
        type: "{{ item.value_type }}"
        state: "{{ item.state }}"
      loop: "{{ registry_settings }}"
      register: reg_results

    - name: Debug registry results
      debug:
        var: reg_results

    - name: folder creation
      ansible.windows.win_file:
        path: "{{ folder_name }}"
        state: directory
      register: creation_results

    - name: Debug folder creation results
      debug:
        var: creation_results

    - name: Show file name extensions
      win_regedit:
        path: HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
        name: HideFileExt
        data: "{{ file_name_extensions }}"
        type: dword
      register: hide_file_ext_result

    - name: Show hidden items
      win_regedit:
        path: HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
        name: Hidden
        data: "{{ show_hidden_items }}"
        type: dword
      register: show_hidden_items_result

    - name: Set custom log file path
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application"
        name: "File"
        data: "{{ custom_log_file_path }}"
        type: string
        state: present

    - name: Set maximum log size (in bytes)
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application"
        name: "MaxSize"
        data: "{{ maximum_log_size_bytes }}"
        type: dword
        state: present

    - name: Set retention policy to overwrite events when maximum log size is reached
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application"
        name: "Retention"
        data: "{{ retention_policy }}"
        type: dword
        state: present

    - name: Disable automatic log file backup when full
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application"
        name: "AutoBackupLogFiles"
        data: "{{ auto_backup_log_files }}"
        type: dword
        state: present

    - name: Configure Security event log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security"
        name: "File"
        data: "{{ custom_security_log_file_path }}"
        type: string
        state: present

    - name: Set maximum log size (in bytes) for Application event log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application"
        name: "MaxSize"
        data: "{{ maximum_log_size_bytes }}"
        type: dword
        state: present

    - name: Set maximum log size (in bytes) for Security event log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security"
        name: "MaxSize"
        data: "{{ maximum_security_log_size_bytes }}"
        type: dword
        state: present

    - name: Configure Application event log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application"
        name: "File"
        data: "{{ custom_log_file_path }}"
        type: string
        state: present

    - name: Configure Security event log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security"
        name: "File"
        data: "{{ custom_security_log_file_path }}"
        type: string
        state: present

    - name: Configure Setup event log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Setup"
        name: "File"
        data: "{{ custom_setup_log_file_path }}"
        type: string
        state: present

    - name: Set custom log file path for System event log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\System"
        name: "File"
        data: "{{ custom_system_log_file_path }}"
        type: string
        state: present

    - name: Set maximum log size (in bytes) for System event log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\System"
        name: "MaxSize"
        data: "{{ maximum_system_log_size_bytes }}"
        type: dword
        state: present

    - name: Set retention policy to overwrite events when maximum log size is reached for System event log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\System"
        name: "Retention"
        data: "{{ system_retention_policy }}"
        type: dword
        state: present

    - name: Disable automatic log file backup when full for System event log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\System"
        name: "AutoBackupLogFiles"
        data: "{{ system_auto_backup_log_files }}"
        type: dword
        state: present

    - name: Set custom log file path for Forwarded Events log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\ForwardedEvents"
        name: "File"
        data: "{{ custom_forwarded_events_log_file_path }}"
        type: string
        state: present

    - name: Set maximum log size (in bytes) for Forwarded Events log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\ForwardedEvents"
        name: "MaxSize"
        data: "{{ maximum_forwarded_events_log_size_bytes }}"
        type: dword
        state: present

    - name: Set retention policy to overwrite events when maximum log size is reached for Forwarded Events log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\ForwardedEvents"
        name: "Retention"
        data: "{{ forwarded_events_retention_policy }}"
        type: dword
        state: present

    - name: Disable automatic log file backup when full for Forwarded Events log
      win_regedit:
        path: "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\ForwardedEvents"
        name: "AutoBackupLogFiles"
        data: "{{ forwarded_events_auto_backup_log_files }}"
        type: dword
        state: present

    - name: Reboot the system to apply changes
      win_reboot:
      async: 0
      poll: 0
      register: reboot_result
